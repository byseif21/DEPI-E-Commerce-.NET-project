@model List<Styleza.Models.CartItem>
@{
    ViewData["Title"] = "Cart";
	Layout = "_Layout";
}
<section class="cart-section">
    <div class="container">
        <h2 class="section-title">Shopping Cart</h2>
        @if (Model.Any())
        {
            <div class="cart-items">
                @foreach (var item in Model)
                {
                    <div class="cart-item">
                        <div class="cart-item-img">
                            <img src="@item.Product.ImageUrl" alt="@item.Product.Name">
                        </div>
                        <div class="cart-item-info">
                            <h4 class="cart-item-title">@item.Product.Name</h4>
                            <div class="cart-item-price">@item.Quantity × $@item.Product.Price</div>
                        </div>
                        <div class="cart-item-remove" data-id="@item.Id">
                            <i class="fas fa-times"></i>
                        </div>
                    </div>
                }
            </div>
            <div class="cart-footer">
                <div class="cart-total">
                    <span>Total:</span>
                    <span>$@Model.Sum(item => item.Quantity * item.Product.Price)</span>
                </div>
                <div class="cart-buttons">
                    <a href="/Checkout/Index" class="checkout-btn">Proceed to Checkout</a>
                </div>
            </div>
        }
        else
        {
            <div class="empty-cart">
                <p>Your cart is empty.</p>
            </div>
        }
    </div>
</section>
@section Scripts {
    <script>
        document.querySelectorAll('.cart-item-remove').forEach(btn => {
            btn.addEventListener('click', async function () {
                const id = this.dataset.id;
                const response = await fetch('/Cart/RemoveFromCart', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ id: parseInt(id) })
                });
                const result = await response.json();
                if (result.success) {
                    alert(result.message);
                    this.closest('.cart-item').remove();
                    const cartItems = document.querySelectorAll('.cart-item');
                    if (cartItems.length === 0) {
                        document.querySelector('.cart-items').innerHTML = '<div class="empty-cart"><p>Your cart is empty.</p></div>';
                    }
                    // update total
                    const total = Array.from(document.querySelectorAll('.cart-item')).reduce((sum, item) => {
                        const priceText = item.querySelector('.cart-item-price').textContent;
                        const [quantity, price] = priceText.split(' × $').map(s => parseFloat(s));
                        return sum + quantity * price;
                    }, 0);
                    document.querySelector('.cart-total span:last-child').textContent = `$${total.toFixed(2)}`;
                    // update cart count
                    const cartCount = document.querySelector('.cart-count');
                    cartCount.textContent = parseInt(cartCount.textContent) - 1;
                }
            });
        });
    </script>
}